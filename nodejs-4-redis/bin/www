#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-4-redis:server');
var http = require('http');

var redis = require('redis');
var redisClient = redis.createClient();

var storeMessage = function(nickName, msg){
  var message = JSON.stringify({nickName: nickName, msg: msg});
  redisClient.lpush("messages", message, function (err, response){
    redisClient.ltrim("messages", 0, 9);
  });
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9090');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

io.on('connection', function(socket){

  socket.on("join", function(nickName){

    // take newly connected user nickname and notify everyone about new user
    socket.nickName = nickName;
    io.emit("incoming_message", nickName + " connected");
    console.log(nickName + " connected");

    // sending previous messages to newly connected client
    redisClient.lrange("messages", 0, -1, function(err, messages){
      messages = messages.reverse();
      messages.forEach(function(message){
        message = JSON.parse(message);
        socket.emit("incoming_message", message.nickName + ": " + message.msg);
      });
    });

  });

  socket.on("incoming_message", function(msg){
    socket.broadcast.emit("incoming_message", socket.nickName + ": " + msg);
    storeMessage(socket.nickName, msg);
    console.log(socket.nickName + ": " + msg);
  });

  socket.on("disconnect", function(){
    io.emit("incoming_message", nickName + " disconnected");
    console.log(nickName + " disconnected");
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
